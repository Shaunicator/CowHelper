/**@module Faction*/
//Includes references to Faction instance, and Unit instances, but does not require the modules (at this point)
const { ModuleUtils } = require('../middleware/utility/utility');
let thisModule = new ModuleUtils("Faction")
thisModule.logLoad;
thisModule.TEST_MODE = false;
//========================================================================================================

const Utility = require("../middleware/utility/utility");
const $TYPE = require('./globals');
const { Resources } = require("./stats");


/** Represents the "country or nation" the player is representing in the game. */
class Faction {
    /**A record of all active instances and {@property id} - (should this be with the "Game" class (yet to be created))  */
    static $REGISTER = new Map();
    $UNITS = new Map(); //A list of all Unit instances that are owned by an instance of this class (Should this be removed as Army is also linked?)
    $ARMIES = new Map();
    $TERRITORIES = new Map();
    /**
     * Unique 2 letter identifier assigned to the faction and attached to any Army instances linked to the instance
     * Generated by static method {@function generateID}, and checks the static register
     */
    #id;
    scores = {
        current: 0,
        updated: 0
    }
    
    
    /**
     * @param { !string } name Name of the faction, nation or country - ideally unique
     * @param {$TYPE} doctrine
     * 
     */
    constructor(name, doctrine) {
        this.Output = {};
        Object.assign(this.Output, new Resources());

        this.name = name;
        this.doctrine = doctrine

        this.generateID();
        //When unqiue ID found - add to $REGISTER
        //Add more validation here before adding to REGISTER??
        Faction.$REGISTER.set(this.#id, this.name)
    }
    generateID(){
        //Generate an ID until one that doesn't exist in the $REGISTER. 
        do { this.#id = Utility.generateAplhaString(2) }
        while (Faction.$REGISTER.has(this.#id))
    }
    get id() {
        //console.log(`${this.#id} : ${this.name}`)
        return this.#id
    }
    addArmy(army) {
        if (!this.$ARMIES.has(army.id)) {
            this.$ARMIES.set(army.id, army)
        } else {
            console.error("Error: Army already exists");
        }
    }
    removeArmy(army) {
        if (this.$ARMIES.has(army.id)) {
            this.$ARMIES.delete(army.id)
        }

    }
    get totalOutput() {
        // console.log("Total Output: ")
        // console.log("Number of entries: ", this.$TERRITORIES.size)
        this.$TERRITORIES.forEach((value, Name) => {
            // console.log("This Money: ", value.output.money)
            this.Output.money += Math.round(value.output.money / 24);
            // console.log("Money: ", this.Output.money)
            this.Output.manpower += Math.round(value.output.manpower / 24)
            // console.log("Manpower: ", this.Output.manpower)
            let type;
            if (value.constructor.name !== "Territory") {
                type = (value.resourceType.description);
            }

            if (value.output.resource) {
                this.Output[type.toString().toLowerCase()] += Math.round(value.output.resource / 24);
                //console.log(`${type}: ${value.output.resource}`)
            }

        })
        console.log("Hourly Output: ", this.Output)

    }
    addTerritory(territory) {
        //console.log("Adding territory: ", territory.territoryName)
        this.$TERRITORIES.set(territory.territoryName, territory)
    }
    /**
     * @method generateID Generates a string of the indicated length using characters from A-Z (only uppercase) 
     * @param {Number} length Length of the generated string (Default 2)
    */
    static generateID(length = 2 ) {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        let result = '';
        for (let i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * 26));
        }
        return result;
    }
}



exports.Faction = Faction;

